{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","role","onClick","toggleMode","htmlhtmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","class","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","reversedText","split","reverse","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","alert","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.e310b83e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n  return (\n    <div>\n\n\n      {/* left wale  */}\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\"> {props.title} </a>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                Dropdown\n              </a>\n              <ul className=\"dropdown-menu\">\n                <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\n                <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\n                <li><hr className=\"dropdown-divider\"/></li>\n                <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\n              </ul>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link disabled\" href = \"/\">Disabled</a>\n            </li>\n          </ul>\n\n\n\n          {/* right wale  */}\n          {/* <div className={`btn-group text-${props.mode==='light'?'blue':'red'}`} role=\"group\" aria-label=\"Basic radio toggle button group\">\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio1\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-success\" htmlFor=\"btnradio1\">Green mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio2\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio2\">Blue mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio3\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-danger\" htmlFor=\"btnradio3\">Red mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio4\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-dark\" htmlFor=\"btnradio4\">Dark mode</label>\n\n              <input type=\"radio\" className=\"btn-check\" onClick={props.toggleMode} name=\"btnradio\" id=\"btnradio5\" autocomplete=\"off\"/>\n              <label className=\"btn btn-outline-secondary\" htmlFor=\"btnradio5\">Light mode</label>\n\n               &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n          </div> */}\n\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n               {/* eslint-disable-next-line */}\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n               <label className={`form-check-label text-${props.mode==='dark'?'light':'dark'}`} htmlhtmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n          </div>\n        </div>\n      </div>\n    </nav>\n    </div>\n  )\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired ,\n  aboutText: PropTypes.string \n};\n\nNavbar.defaultProps = {\n  title: 'Akshay', \n  aboutText: 'Jain'\n}","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n\n  const handleUpClick = () => {\n    // console.log(\"uppercase was clicked\");\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to uppercase\",\"success\");\n  }\n  const handleLoClick = () => {\n    // console.log(\"uppercase was clicked\");\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase\",\"success\");\n  }\n  const handleReverse = () => {\n    let reversedText = text.split(\"\").reverse().join(\"\");\n    setText(reversedText);\n    props.showAlert(\"String reversed successfully\",\"success\");\n  }\n  const handleCopy = () => {\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Text copied successfully\",\"success\");\n  }\n  const handleSpaces = () => {\n    // eslint-disable-next-line\n    let newText = text.split(/[  ] +/);\n    setText(newText.join(\" \"))\n    props.showAlert(\"Spaces removed successfully\",\"success\");\n  }\n\n  const handleOnChange = (event) => {\n    // console.log(\"on change\");\n    setText(event.target.value);\n  }\n\n  const[text, setText] = useState('');\n  // setText(\"Jain\");\n  return (\n    <>\n\n    {/* upper  */}\n\n\n\n    <div className=\"container\" style={{color: props.mode ==='dark'?'white':'#042743'}}>\n        <h2>{props.heading}</h2>\n\n\n        {/* textarea */}\n\n        <div class=\"mb-3\">\n          <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style={{backgroundColor: 'props.toggleMode.bgcolr' ,color: 'props.toggleMode.colr' }} id=\"myBox\" rows=\"8\"></textarea>\n        </div>\n\n\n        {/* buttons */}\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}> Convert to UpperCase </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}> Convert to LowerCase </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleReverse}> Reverse the string </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}> Copy the text </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleSpaces}> Remove the spaces </button>\n\n\n\n    </div>\n\n\n    {/* bottom */}\n\n\n    <div className=\"container my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}}>\n      <h1>Your text summary</h1>\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\n      <p> {0.008 * text.split(\" \").length} minuters to read</p>\n      <h2>Preview</h2>\n      <p>{text.length>0?text:\"Enter you text above to preview it\"}</p>\n    </div>\n    </>\n  )\n}","import React from 'react'\n\nfunction Alert(props) {\n\n    // const capitalize = (word) =>{\n    //     const str = word.toLowerCase();\n    //     return str.charAt(0).toUpperCase + str.slice(1);\n    // }\n\n  return (\n\n        // iske bahar <div> lga tha to error aa rha tha     \n        \n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            {/* <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} */}\n            <strong>{props.alert.type}</strong>: {props.alert.msg}\n        </div>\n\n  )\n}\n\nexport default Alert\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  // it will tell whether dark mode is enabled or not\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n      if(mode === 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor = '#042743';\n        showAlert(\"Dark mode has been enabled\", \"success\");\n        document.title = 'TextUtils - Dark Mode';\n      }else{\n        setMode('light');\n        document.body.style.backgroundColor = 'white';\n        showAlert(\"Light mode has been enabled\", \"success\");\n        document.title = 'TextUtils - Light Mode';\n      }\n      // let bgcolr = 'a';\n      // let colr = 'b';\n      // switch (mode) {\n      //   case 'green':\n      //     setMode('green');\n      //     document.body.style.backgroundColor = 'green';\n      //     showAlert(\"Green mode has been enabled\", \"success\");\n      //     bgcolr = 'green';\n      //     colr = 'white';\n      //     break;\n      //   case 'blue':\n      //     setMode('blue');\n      //     document.body.style.backgroundColor = 'blue';\n      //     showAlert(\"Blue mode has been enabled\", \"success\");\n      //     bgcolr = 'blue';\n      //     colr = 'white';\n      //     break; \n      //   case 'red':\n      //     setMode('red');\n      //     document.body.style.backgroundColor = 'red';\n      //     showAlert(\"Red mode has been enabled\", \"success\");\n      //     bgcolr = 'red';\n      //     colr = 'white';\n      //     break;\n      //   case 'dark':\n      //     setMode('dark');\n      //     document.body.style.backgroundColor = 'black';\n      //     showAlert(\"Dark mode has been enabled\", \"success\");\n      //     bgcolr = 'black';\n      //     colr = 'white';\n      //     break;\n      //   case 'light':\n      //     setMode('light');\n      //     document.body.style.backgroundColor = 'white';\n      //     showAlert(\"light mode has been enabled\", \"success\");\n      //     bgcolr = 'white';\n      //     colr = 'black';\n      //     break;\n      //   default:\n      //     setMode('light');\n      //     document.body.style.backgroundColor = 'white';\n      //     showAlert(\"light mode has been enabled\", \"success\");\n      //     bgcolr = 'white';\n      //     colr = 'black';\n      // }\n  }\n\n\n  // for alert message\n  const[alert, setAlert] = useState(null); // here my alert was null\n\n  const showAlert = (message, type) => {         // now my alert is an object, set alert - alert ko set update karne ke liye hai aur show alert ek function hai jo madad karega function ko show karne me \n  // type me 1) red-danger 2) green-success 3)yellow - warning 4) blue \n      setAlert({\n        msg: message, \n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n\n\n\n      <Navbar title = 'TextUtils' mode={mode} toggleMode={toggleMode} aboutText = \"About TextUtils\"/>\n      <Alert alert={alert}/>\n\n\n     <div className=\"container my-3\">\n        {/* here we passed show alert method to textform then we will use it in every button */}\n\n\n\n        {/* <Routes> */}\n\n          {/* <Route exact path=\"/about\" element={<About/>} /> */}\n            {/* <About /> */}\n          {/* </Route> */}\n  \n          {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode={mode}/>}/> */}\n            <TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Routes> */}\n\n        {/* <Routes>\n\n          <Route path=\"/about\">\n            <About/>\n          </Route>\n          <Route path=\"/\" >\n            <TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode={mode}/>\n          </Route>\n\n\n        </Routes> */}\n\n\n\n      </div> \n      \n\n      {/* <div className=\"container my-3\">\n        <About>  </About>\n      </div>\n       */}\n\n\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}